// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id        String @id @default(uuid())
  username  String @unique
  firstname String
  lastname  String
  email     String @unique
  password  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts    Posts[]
  comments Comments[]
  likes    Likes[]

  following Follows[] @relation("followedBy")
  followers Follows[] @relation("following")
}

model Follows {
  followedBy   Users  @relation("followedBy", fields: [followedById], references: [id], onDelete: Cascade)
  followedById String
  following    Users  @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([followingId, followedById])
}

model Posts {
  id      String @id @default(uuid())
  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   Users  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  images   Images[]
  comments Comments[]
  likes    Likes[]
}

model Images {
  id            String @id @default(uuid())
  name          String
  size          Int
  resource_type String
  format        String
  public_id     String

  post   Posts  @relation(fields: [postId], references: [id])
  postId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comments {
  id      String @id @default(uuid())
  content String

  user   Users  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  post   Posts  @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Likes {
  user   Users  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  post   Posts  @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, postId])
}
